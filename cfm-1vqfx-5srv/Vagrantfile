# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

libx = File.expand_path('../lib', __dir__)
$LOAD_PATH.unshift(libx) unless $LOAD_PATH.include?(libx)

require 'config'
cf   = Config.new('topo.yaml')
puts("Provisioning: #{cf.version}")
require 'fileedit'
require 'fileutils'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    re_name  = "vqfx"
    pfe_name = "vqfx-pfe"

    ##############################
    ## Packet Forwarding Engine ##
    ##############################
    config.vm.define pfe_name do |vqfxpfe|
        vqfxpfe.ssh.insert_key = false
        vqfxpfe.vm.box = 'juniper/vqfx10k-pfe'

        # DO NOT REMOVE / NO VMtools installed
        vqfxpfe.vm.synced_folder '.', '/vagrant', disabled: true
        vqfxpfe.vm.network 'private_network',
          auto_config: false,
          nic_type: '82540EM',
          virtualbox__intnet: "vqfx_internal"
    end

    ##########################
    ## Routing Engine  #######
    ##########################
    config.vm.define re_name do |vqfx|
        vqfx.vm.hostname = "vqfx"
        vqfx.vm.box = 'juniper/vqfx10k-re'
        vqfx.ssh.insert_key = false

        # DO NOT REMOVE / NO VMtools installed
        vqfx.vm.synced_folder '.', '/vagrant', disabled: true

        # Management Ports
        vqfx.vm.network 'private_network',
          auto_config: false,
          nic_type: '82540EM',
          virtualbox__intnet: "vqfx_internal"
        vqfx.vm.network 'private_network',
          auto_config: false,
          nic_type: '82540EM',
          virtualbox__intnet: "reserved-bridge"

        ## Dataplane ports
        (1..8).each do |seg_id|
           vqfx.vm.network 'private_network',
             auto_config: false,
             nic_type: '82540EM',
             virtualbox__intnet: "seg#{seg_id}"
        end
    end

    ##########################
    ## Servers         #######
    ##########################
    # Defaults for config options defined in CONFIG
    # $subnet_mgmt = "10.87.65"
    $subnet_ctrl_data= "172.16.1"

    #
    # construct the instances.yaml file that contrail can reliably use for
    # its setup.  This file will be available in /vagrant in the VM.
    #
    FileUtils.cp 'instance-templates.yaml', 'instances.yaml'
    srvCf = Hash.new()
    (1..5).each do |id|
        srv_name = ( "srv" + id.to_s ).to_sym
        _srvcf = Hash.new()
        _srvcf[:addr] = cf.get_next_addr
        _srvcf[:user] = ENV["CF_USER"]
        _srvcf[:pass] = ENV["CF_PASS"]
        file_edit("instances.yaml", /<#{srv_name}.addr>/, _srvcf[:addr])
        file_edit("instances.yaml", /<#{srv_name}.user>/, _srvcf[:user])
        file_edit("instances.yaml", /<#{srv_name}.pass>/, _srvcf[:pass])
        srvCf[srv_name] = _srvcf
    end
    
    (1..5).each do |id|
        srv_name = ( "srv" + id.to_s ).to_sym
        config.vm.define srv_name do |srv|
            srv.vm.box = "qarham/CentOS7.5-350GB"
            srv.vm.hostname = "srv#{id}"
            srv.vm.network "public_network",
              bridge:  "br0",
              ip:       srvCf[srv_name][:addr],
              netmask: "255.255.255.128"
            srv.vm.network 'private_network',
              ip: "#{$subnet_ctrl_data}.#{id+100}",
              nic_type: '82540EM',
              virtualbox__intnet: "seg#{id}"
            srv.ssh.insert_key = true
            srv.vm.provision "shell", path: "../scripts/enable_root_login.sh"
            srv.vm.provision "shell",
              path: "../scripts/set-centos-gw.sh",
              args: [ "gateway", cf.get_default_gw ]
            srv.vm.provision "shell", path: "../scripts/dns.sh",
              args: cf.get_dns_entries.join(' ')
            srv.vm.provision "shell", path: "../scripts/install-net-tools.sh"
            srv.vm.provision "shell", path: "../scripts/ntp.sh"
            srv.vm.provision "shell",
               inline: "sudo ip route add 172.16.0.0/16 via 172.16.1.1"
            srv.vm.provision "file",
              source: "instances.yaml",
              destination: "/home/vagrant/instances.yaml"

            config.vm.provider :virtualbox do |vb|
                vb.customize ["modifyvm", :id,
                              "--memory", "32768",
                              "--cpus",   "4"]
            end
        end
    end

    ##############################
    ## Box provisioning        ###
    ## exclude Windows host    ###
    ##############################
    if !Vagrant::Util::Platform.windows?
        config.vm.provision "ansible" do |ansible|
            ansible.groups = {
                "vqfx10k" => ["vqfx"],
                "all:children" => ["vqfx10k"]
            }
            ansible.playbook = "provisioning/deploy-config.p.yaml"
	end
    end
end
